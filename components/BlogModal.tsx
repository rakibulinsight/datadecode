import React, { useEffect } from 'react';import { motion, AnimatePresence } from 'framer-motion';interface BlogModalProps {  isOpen: boolean;  onClose: () => void;  blog: {    title: string;    date: string;    content: string;    author: string;    readTime: string;    image: string;  } | null;}const BlogModal: React.FC<BlogModalProps> = ({ isOpen, onClose, blog }) => {  // Handle escape key press  useEffect(() => {    const handleEscape = (e: KeyboardEvent) => {      if (e.key === 'Escape') {        onClose();      }    };    if (isOpen) {      document.addEventListener('keydown', handleEscape);    }    return () => {      document.removeEventListener('keydown', handleEscape);    };  }, [isOpen, onClose]);  // Handle background scroll  useEffect(() => {    if (isOpen) {      document.body.style.overflow = 'hidden';    } else {      document.body.style.overflow = 'unset';    }    return () => {      document.body.style.overflow = 'unset';    };  }, [isOpen]);  if (!isOpen || !blog) return null;

    return (    <AnimatePresence mode="wait">      {isOpen && blog && (        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 overflow-y-auto">          <motion.div            initial={{ opacity: 0 }}            animate={{ opacity: 1 }}            exit={{ opacity: 0 }}            onClick={onClose}            className="fixed inset-0 bg-black/60 backdrop-blur-sm"          />                    <motion.div            initial={{ opacity: 0, scale: 0.9, y: 20 }}            animate={{ opacity: 1, scale: 1, y: 0 }}            exit={{ opacity: 0, scale: 0.9, y: 20 }}            className="relative bg-dark-400 rounded-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto shadow-xl border border-primary/20"            onClick={(e) => e.stopPropagation()}          >            {/* Close Button */}            <button              onClick={onClose}              className="absolute top-4 right-4 text-dark-50/60 hover:text-primary transition-colors z-20 p-2 rounded-lg bg-dark-400/80 backdrop-blur-sm"            >              <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />              </svg>            </button>            {/* Blog Content */}            <div className="relative">              {/* Hero Image */}              <div className="relative h-64 md:h-96">                <div className="absolute inset-0 bg-gradient-to-t from-dark-400 to-transparent z-10" />                <img                  src={blog.image}                  alt={blog.title}                  className="w-full h-full object-cover"                  onError={(e) => {                    const target = e.target as HTMLImageElement;                    target.src = 'https://cdn.pixabay.com/photo/2018/09/18/11/19/artificial-intelligence-3685928_1280.png';                  }}                />              </div>              {/* Content */}              <div className="relative z-20 p-8 -mt-32">                <div className="space-y-6">                  {/* Meta Information */}                  <div className="flex flex-wrap items-center gap-4 text-sm text-dark-50/60">                    <span>{blog.date}</span>                    <span>•</span>                    <span>{blog.readTime} read</span>                    <span>•</span>                    <span>By {blog.author}</span>                  </div>                  {/* Title */}                  <h2 className="text-3xl md:text-4xl font-bold text-dark-50">                    {blog.title}                  </h2>                  {/* Content */}                  <div className="prose prose-invert prose-primary max-w-none">                    <div dangerouslySetInnerHTML={{ __html: blog.content }} />                  </div>                </div>              </div>            </div>          </motion.div>        </div>      )}    </AnimatePresence>
  );
};

export default BlogModal;